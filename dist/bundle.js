/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("\nconst containerDiv = document.getElementById('container')\n\nclass SuperElement {\n  constructor(parent, elementType, textContent, className, id) {\n    this.element = document.createElement(elementType);\n    if (textContent) {\n      this.element.textContent = textContent;\n    }\n    if (className) {\n      this.element.classList.add(className);\n    }\n    if (id) {\n      this.element.id = id;\n    }\n    if (parent) {\n      parent.appendChild(this.element);\n    }\n  }\n}\n//error div\nconst errorDiv = new SuperElement(containerDiv, 'div', '', 'errorMsg', 'errorMsg').element\n\nfunction checkForContent(input, boolean) {\n    if (input.value === '' || input.value == null) {\n        boolean = false\n    } else {\n        boolean = true\n    }\n    if(!boolean) {\n        input.onblur = function() {\n            addBorderToEmpty(input)            \n        }\n    }\n    \n    console.log(boolean)\n    return boolean\n}\nfunction renderStatusStyle(input, boolean) {\n   \n    input.addEventListener('input', () => {\n        if (!checkForContent(input, boolean)) {\n            input.classList.add('redBorder')\n        } else {\n            input.classList.remove('redBorder')\n        }\n        \n    })\n    input.onfocus = function() {\n        if (!checkForContent(input, boolean)) {\n            input.classList.add('redBorder')\n        } else {\n            input.classList.remove('redBorder')\n        }\n        \n    }\n}\nlet nameIsValid\nfunction renderName() {\n\n    const nameDiv = new SuperElement(form, 'div', '', 'formDiv', '').element\n    const nameLabel = new SuperElement(nameDiv, 'label', 'Name:', 'formLabel', 'nameLabel').element\n    nameLabel.htmlFor = 'name'\n    const nameInput = new SuperElement(nameDiv, 'input', '', 'formInput', 'nameInput').element\n    nameInput.name = 'name'\n    nameInput.type = 'text'\n    nameInput.setAttribute('required', 'true')\n    nameInput.placeholder = 'Full Name'\n    nameInput.setCustomValidity\n\n    //validate input content    \n    nameIsValid = renderStatusStyle(nameInput, nameIsValid)\n    return nameIsValid\n}\nlet emailIsValid\nfunction renderEmail() {\n    const emailDiv = new SuperElement(form, 'div', '', 'formDiv', '').element\n    const emailLabel = new SuperElement(emailDiv, 'label', 'Email:', 'formLabel', 'emailLabel').element\n    emailLabel.htmlFor = 'email'\n    const emailInput = new SuperElement(emailDiv, 'input', '', 'formInput', 'emailInput').element\n    emailInput.name = 'email'\n    emailInput.type = 'email'\n    emailInput.setAttribute('required', 'true')\n    emailInput.placeholder = 'Email'\n\n    //validate input content\n    checkForContent(emailInput, emailIsValid)\n    \n    return emailIsValid\n}\n\nfunction renderAddress() {\n    const stAddressDiv = new SuperElement(form, 'div', '', 'formDiv', '').element\n    const stAddressLabel = new SuperElement(stAddressDiv, 'label', 'Address: ', 'formLabel', 'stAddressLabel').element\n    stAddressLabel.htmlFor = 'stAddress'\n    const stAddressInput = new SuperElement(stAddressDiv, 'input', '', 'formInput', 'stAddressInput').element\n    stAddressInput.name = 'stAddress'\n    stAddressInput.type = 'text'\n    stAddressInput.placeholder = '123 Example St.'\n    //city\n    const cityAddressDiv = new SuperElement(form, 'div', '', 'formDiv', '').element\n    const cityLabel = new SuperElement(cityAddressDiv, 'label', 'City:', 'formLabel', 'cityLabel').element\n    cityLabel.htmlFor = 'city'\n    const cityInput = new SuperElement(cityAddressDiv, 'input', '', 'formInput', 'cityInput').element\n    cityInput.name = 'city'\n    cityInput.type = 'text'\n    cityInput.placeholder = 'Atlantis'\n    //state\n    const stateAddressDiv = new SuperElement(form, 'div', '', 'formDiv', '').element\n    const stateLabel = new SuperElement(stateAddressDiv, 'label', 'State:', 'formLabel', 'stateLabel').element\n    stateLabel.htmlFor = 'state'\n    const stateInput = new SuperElement(stateAddressDiv, 'input', '', 'formInput', 'stateInput').element\n    stateInput.name = 'state'\n    stateInput.type = 'text'\n    stateInput.placeholder = 'State'\n    //zip\n    const zipDiv = new SuperElement(form, 'div', '', 'formDiv', '').element\n    const zipLabel = new SuperElement(zipDiv, 'label', 'Zip Code:', 'formLabel', 'zipLabel').element\n    zipLabel.htmlFor = 'zip'\n    const zipInput = new SuperElement(zipDiv, 'input', '', 'formInput', 'zipInput').element\n    zipInput.name = 'zip'\n    zipInput.type = 'text'\n    zipInput.placeholder = '90210'\n}\n\nfunction renderPassword() {\n    //password\nconst passwordDiv = new SuperElement(form, 'div', '', 'formDiv', '').element\nconst passwordLabel = new SuperElement(passwordDiv, 'label', 'Password:', 'formLabel', 'passwordLabel').element\npasswordLabel.htmlFor = 'password'\nconst passwordInput = new SuperElement(passwordDiv, 'input', '', 'formInput', 'passwordInput').element\npasswordInput.name = 'password'\npasswordInput.type = 'password'\npasswordInput.placeholder = 'Password'\npasswordInput.minLength = 8\npasswordInput.setAttribute('required', 'true')\n //password requiements\n\n const passwordRequirements = ['lowercase', 'uppercase', 'number', 'specialCh', 'minLength',]\n const errorDiv = new SuperElement(passwordDiv, 'div', 'Required:', 'pwdErrorDiv', 'pwdErrorDiv').element\n errorDiv.classList.add('hide')\n\n //event listeners\npasswordInput.onfocus = function() {\n    if (!checkRequired(passwordInput)) {\n        errorDiv.classList.remove('hide')\n    }\n    passwordRequirements.map(item => {\n    \n    console.log(item)\n    let content = item\n    if (item === 'minLength') {\n        content = '8 character min' \n    }\n    if (item === 'specialCh') {\n        content = '!@#$%^&*'\n    }\n    const requiredElem = new SuperElement(errorDiv, 'p', content, 'passwordMsg', item).element\n    requiredElem.classList.add('colorRed')\n    checkRequired(passwordInput)\n})\n}\n\n    passwordInput.addEventListener('input', function() {\n        let requiredTxt = document.querySelectorAll('.passwordMsg');\n        for (let i = 0; i < requiredTxt.length; i++) {\n            checkRequired(passwordInput)\n            if (checkRequired(passwordInput)) {\n                errorDiv.classList.add('hide')\n                passwordInput.classList.remove('redBorder')\n                passwordInput.classList.remove('invalid')\n            } else {\n                errorDiv.classList.remove('hide')\n                // passwordInput.classList.add('invalid')\n\n            }\n        }\n    })\n\n    passwordInput.onblur = function() {\n        errorDiv.classList.add('hide')\n        if (!checkRequired(passwordInput)) {\n            passwordInput.classList.add('redBorder')\n            } else {\n            passwordInput.classList.remove('redBorder')\n        }\n    let passwordMsgs = document.querySelectorAll('.passwordMsg')\n    for (let i = 0; i < passwordMsgs.length; i++) {\n        passwordMsgs[i].remove()\n    }\n  }\n  renderPswdConfirm(passwordInput)\n}\nfunction renderPswdConfirm(password) {\n    //password confirmation\nconst confirmPswdDiv = new SuperElement(form, 'div', '', 'formDiv', '').element\nconst confirmPswdLabel = new SuperElement(confirmPswdDiv, 'label', 'Confirm: ', 'formLabel', 'confirmPswdLabel').element\nconfirmPswdLabel.htmlFor = 'confirmPswd'\nconst confirmPswdInput = new SuperElement(confirmPswdDiv, 'input', '', 'formInput', 'confirmPswdInput').element\nconfirmPswdInput.name = 'confirmPswd'\nconfirmPswdInput.type = 'password'\nconfirmPswdInput.placeholder = 'Confirm password'\nconfirmPswdInput.setAttribute('required', 'true')\nconst errorConfirmPswd = new SuperElement(confirmPswdDiv, 'div', 'Passwords not a match', 'pwdErrorDiv', 'pwdErrorDiv').element\nerrorConfirmPswd.classList.add('hide')\nerrorConfirmPswd.classList.add('colorRed')\n\nconfirmPswdInput.onfocus = function() {\n    if (!matchPassword(password, confirmPswdInput)) {\n        errorConfirmPswd.classList.remove('hide')\n    } else {\n        errorConfirmPswd.classList.add('hide')\n    }\n}\nconfirmPswdInput.addEventListener('input', function() {\n    if (matchPassword(password, confirmPswdInput)) {\n        errorConfirmPswd.classList.add('hide')\n        errorConfirmPswd.classList.remove('redBorder')\n    } else {\n        errorConfirmPswd.classList.remove('hide')   \n    }\n})\nconfirmPswdInput.onblur = function() {\n    if (!matchPassword(password, confirmPswdInput)) {\n        confirmPswdInput.classList.add('redBorder')\n    } else {\n        confirmPswdInput.classList.remove('redBorder')\n    }\n    errorConfirmPswd.classList.add('hide')\n    }\n}\n\nconst renderForm = () => {\n    let messages = []\n    //form\n    const form = new SuperElement(containerDiv, 'form', '', 'form', 'form').element\n    form.action = '/'\n    form.method = 'GET'\n\n    //render inputs and labels\n\n    renderName()\n    renderEmail()\n    renderAddress()\n    renderPassword()\n    let pswdValid \n    let nameIsValid  \n    let emailIsValid \n    //submit button\n    const submitBtn = new SuperElement(form, 'button', 'Submit', 'formBtn', 'submitBtn').element\n    if (messages.length > 0) {\n    checkForContent(nameInput, nameIsValid)\n    }\n    submitBtn.addEventListener('click', (e) => {\n        messages.length = 0\n        const prevError = document.getElementById('sbmtError')\n        if (prevError) {\n            prevError.remove()\n        }\n\n        // const errorDiv = new SuperElement(form, 'div', '', 'errorDiv', 'sbmtError').element\n        // nameIsValid = checkForContent(nameInput, nameIsValid)\n        // emailIsValid = checkForContent(emailInput, emailIsValid)\n        // const passwordInput = document.getElementById('passwordInput')\n        // pswdValid = checkRequired(passwordInput)\n        checkValidity()\n        const confirmPswdInput = document.getElementById('confirmPswdInput')\n        let confirmPswdIsValid \n        if (!pswdValid) {\n            confirmPswdIsValid = false\n       } else {\n        confirmPswdIsValid = true\n       }\n        //check name\n    //   console.log(nameIsValid, emailIsValid, pswdValid, confirmPswdIsValid)\n    //     if (!nameIsValid) {\n    //         messages.push('Name field empty')\n    //         addBorderToEmpty(nameInput)\n    //     }\n    //     if (!emailIsValid) {\n    //         messages.push('Email field empty')\n    //         addBorderToEmpty(emailInput)\n    //     }    \n    //     if (!pswdValid) {\n    //         messages.push('Password is not valid')\n    //         addBorderToEmpty(passwordInput)\n    //     }\n    //     if (!confirmPswdIsValid) {\n    //         messages.push('Confirm password is not valid')\n    //         addBorderToEmpty(confirmPswdInput)\n    //     }\n    //     //check email\n    //     if (messages.length > 0 ) {\n    //         e.preventDefault()\n    //         errorDiv.innerText = messages.join(', ')\n    //     }\n    //     console.log(messages);\n    })\n}\n\nfunction hideTxt(el, requiredChar) {\n    if (el) {\n        if (requiredChar) {\n            el.classList.add('hide')\n        } else {\n            el.classList.remove('hide')\n        }        \n    }    \n}\n\nconst addBorderToEmpty = (input) => {\n    if (input.value == '') {\n        input.classList.add('redBorder')\n    } else {\n        input.classList.remove('redBorder')\n    }\n    \n}\n\nfunction checkValidity() {\n    const formInputs = document.querySelectorAll('.formInput')\n\n    formInputs.forEach(input => {\n        console.log(input)\n        const inputValue = input.value.trim()\n        if (input.hasAttribute('required') && inputValue === '') {\n            input.setCustomValidity('This field is required.')\n            addBorderToEmpty(input)\n            input.reportValidity()\n        }\n    })\n\n}\n\n\nfunction checkRequired(password) {   \n\n    let minLengthTxt = document.getElementById('minLength')\n    let minNumberTxt = document.getElementById('number')\n    let capTxt = document.getElementById('uppercase')\n    let lowerTxt = document.getElementById('lowercase')\n    let spclCharTxt = document.getElementById('specialCh')\n\n    let minLength \n    let minNumber\n    let uppercase\n    let lowercase\n    let specialCh\n\n    if(password.value.length >= 8){\n        minLength = true\n    } else {\n        minLength = false       \n    }\n    const numbers = /[0-9]/g;    \n    if (password.value.match(numbers)){\n        minNumber = true\n    } else {\n        minNumber = false\n    } \n    const capitalLetters = /[A-Z]/g;    \n    if(password.value.match(capitalLetters)) {\n        uppercase = true\n    } else {\n        uppercase = false\n    }\n    const letters = /[a-z]/g;    \n    if (password.value.match(letters)){\n        lowercase = true\n    } else {\n        lowercase = false\n    }\n    const characters = /[!@#$%^&*]/    \n    if (password.value.match(characters)) {\n        specialCh = true    \n    } else {\n        specialCh = false\n    }\n    \n    hideTxt(minLengthTxt, minLength)\n    hideTxt(minNumberTxt, minNumber)\n    hideTxt(capTxt, uppercase)\n    hideTxt(lowerTxt, lowercase)\n    hideTxt(spclCharTxt, specialCh)\n    \n    if (minLength && minNumber && uppercase && lowercase && specialCh) {\n        pswdValid = true\n    } else {\n        pswdValid = false\n    }\n    console.log(minLength, minNumber, uppercase, lowercase, specialCh, 'All Req ', pswdValid)\n    return pswdValid\n \n}\n\n\n\nfunction matchPassword(password, confirmPwd) {    \n    let isMatch\n    if(password.value == confirmPwd.value && password.value != ''){\n        isMatch = true        \n    }\n    if(password.value != confirmPwd.value){\n        isMatch = false\n    }\n    return isMatch\n}\n\n\n\nrenderForm()\n\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;